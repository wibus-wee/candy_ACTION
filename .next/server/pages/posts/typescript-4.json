{"pageProps":{"title":"一起入手TypeScript（四）","slug":"typescript-4","created":"2021-01-02T16:01:41.008Z","modified":"2021-01-03T07:42:20.098Z","content":"\n\n## 10 TypeScript 类的概念和使用\n\n`TypeScript` 中类的概念和` ES6 `中原生类的概念大部分相同，但是也额外增加了一些新的特性。我在这里会完全从一个新手的角度，讲解类的各项知识点。\n\n### 10.1 类的基本使用\n\n新建一个文件，叫做`demo10.ts`,然后定义一个最简单的`Lady`类,这里要使用关键字`class`,类里边有姓名属性和一个得到姓名的方法\n```ts\nclass Lady {\n    content = \"Hi，帅哥\";\n    sayHello() {\n      return this.content;\n    }\n}\n  \nconst goddess = new Lady();\nconsole.log(goddess.sayHello());\n// ts-node demo10.ts\n//result：Hi，帅哥\n```\n\n> 代码下面的注释的意思是：运行ts-node demo10.ts命令，得到的结果是：Hi，帅哥\n\n这是一个最简单的类了，如果你有些编程经验，对这个一定很熟悉\n\n### 10.2 类的继承\n\nTypeScrip 的继承和ES6中的继承是一样的。关键字也是`extends`,比如我们这里新建一个`xiaoJieJie`的类，然后继承自`Lady`类，在`XiaoJieJie`类里写一个新的方法，叫做`sayLove`,具体代码如下。\n\n```ts\nclass xiaoJieJie extends Lady{\n    sayLove(){\n        return \"I love you.\";\n    }\n}\n\nconst Wibus = new xiaoJieJie();\nconsole.log(Wibus.sayHello());\nconsole.log(Wibus.sayLove());\n// ts-node demo10.ts\n// result: Hi，帅哥 I love you.\n```\n类写好以后，我们声明的对象是`xiaoJieJie`这个类，我们同时执行`sayHello()`和`sayLove()`都是可以执行到的，这说明继承起作用了\n\n### 10.3 类的重写\n\n讲了继承，那就必须继续讲讲重写，重写就是子类可以重新编写父类里边的代码。现在我们在`XiaoJieJies`这个类里重写父类的`sayHello()`方法\n\n```ts\nclass XiaoJieJies extends Lady {\n    sayLove(){\n        return \"I love you.\";\n    }\n    sayHello() {\n        return \"Hi, honey!\";\n      }\n}\n\nconst wibus = new XiaoJieJies();\nconsole.log(wibus.sayHello());\nconsole.log(wibus.sayLove());\n// ts-node demo10.ts\n// result: Hi, honey! I love you.\n```\n\n### 10.4 super 关键字的使用\n\n比如我们还是想使用`Lady`类中说的话，但是在后面，加上`你好`两个字就可以了。这时候就可以使用`super`关键字，它代表父类中的方法\n\n```ts\nclass Xiaojiejie extends Lady {\n    sayLove() {\n        return \"I love you!\";\n      }\n      sayHello() {\n        return super.sayHello() + \".你好！\";\n      }\n}\n\nconst goddesss = new Xiaojiejie();\nconsole.log(goddesss.sayHello());\nconsole.log(goddesss.sayLove());\n// ts-node demo10.ts\n// result: Hi，帅哥.你好！I love you!\n```\n\n那么整个下来呢，我们至少要知道TypoeScript中的类是如何定义和继承的。类中还有很多知识点要讲\n\n### Demo10.ts\n\n```ts\n/**\n * Demo10.ts\n * TypeScript 类的概念和使用\n * @date 2021-1-2\n * @author Wibus\n */\n\n // TypeScript 中类的概念和 ES6 中原生类的概念大部分相同，但是也额外增加了一些新的特性\n\n// 1 类的基本使用\n// 下面是最简单的类\nclass Lady {\n    content = \"Hi，帅哥\";\n    sayHello() {\n      return this.content;\n    }\n}\n  \nconst goddess = new Lady();\nconsole.log(goddess.sayHello());\n// ts-node demo10.ts\n//result：Hi，帅哥\n\n// 2 类的继承\n// TypeScrip 的继承和ES6中的继承是一样的。关键字也是extends,比如我们这里新建一个XiaoJieJie的类，然后继承自Lady类，在XiaoJieJie类里写一个新的方法，叫做sayLove,具体代码如下。\n\nclass xiaoJieJie extends Lady{\n    sayLove(){\n        return \"I love you.\";\n    }\n}\n\nconst Wibus = new xiaoJieJie();\nconsole.log(Wibus.sayHello());\nconsole.log(Wibus.sayLove());\n// ts-node demo10.ts\n// result: Hi，帅哥 I love you.\n\n// 类写好以后，我们声明的对象是XiaoJieJie这个类，我们同时执行sayHello()和sayLove()都是可以执行到的，这说明继承起作用了\n\n// 3 类的重写\n// 讲了继承，那就必须继续讲讲重写，重写就是子类可以重新编写父类里边的代码。现在我们在XiaoJieJie这个类里重写父类的sayHello()方法\n\nclass XiaoJieJies extends Lady {\n    sayLove(){\n        return \"I love you.\";\n    }\n    sayHello() {\n        return \"Hi, honey!\";\n      }\n}\n\nconst wibus = new XiaoJieJies();\nconsole.log(wibus.sayHello());\nconsole.log(wibus.sayLove());\n// ts-node demo10.ts\n// result: Hi, honey! I love you.\n\n// 4 super 关键字的使用\n// 比如我们还是想使用Lady类中说的话，但是在后面，加上你好两个字就可以了。这时候就可以使用super关键字，它代表父类中的方法\n\nclass Xiaojiejie extends Lady {\n    sayLove() {\n        return \"I love you!\";\n      }\n      sayHello() {\n        return super.sayHello() + \".你好！\";\n      }\n}\n\nconst goddesss = new Xiaojiejie();\nconsole.log(goddesss.sayHello());\nconsole.log(goddesss.sayLove());\n// ts-node demo10.ts\n// result: Hi，帅哥.你好！I love you!\n\n// 我们至少要知道TypoeScript中的类是如何定义和继承的。类中还有很多知识点要讲\n```\n\n## 11 TypeScript 中类的访问类型\n\n上节已经简单学习了`TypeScript`中类的使用，这节我们继续学习一下类中的访问类型。其实类的访问类型就是基于三个关键词`private`、`protected`和`public`,也是三种访问类型\n\n### 11.1 简单的类\n\n我们来写一个简单的类先，我们定义一个 Person 类，然后使用这个类的对象，进行赋值，最后打印在控制台上。\n\n```ts\nclass Person {\n    name: string;\n  }\n  \nconst person = new Person();\nperson.name = \"Wibus\";\n  \nconsole.log(person.name);\n// ts-node demo11.ts\n// result: Wibus\n```\n\n写完后我们直接可以在`Terminal`(中),输入`ts-node demo11.ts`进行查看结果，结果会打印出`Wibus`\n\n### 11.2 public 访问属性\n\n这时候可以打出Wibus是因为我们如果不在类里对name的访问属性进行定义，那么它就会默认是public访问属性。所以，我们刚刚所写的类相当于这样子\n\n```ts\nclass Person2 {\n    public name: string;\n};\n```\n\n> `public`从英文字面的解释就是`公共的`或者说是`公众的`，在程序里的意思就是允许在类的`内部`和`外部`被调用.\n\n比如说，我们在类里面写一个`sayHello()` 方法，访问属性为`public`\n\n```ts\nclass Person3 {\n    public name: string;\n    public sayhello(){\n        console.log(this.name + ' say hello');\n    };\n};\n// ————————下面的是外部调用——————————\nconst person3 = new Person3;\nperson3.name = \"Wibus\";\nperson3.sayhello();\n// ts-node demo11.ts\n// result: Wibus say hello\n```\n\n这是的`this.name`就是类的内部调用。我们在下面在执行一下这个方法`person3.sayHello()`, 终端中可以看到一切正常运行了，顺利打印\n\n### 11.3 private 访问属性\n\n> `private` 访问属性的意思是，只允许在类的内部被调用，外部不允许调用\n\n现在我们把` name `属性改成`private`,这时候在类的内部使用不会提示错误，而`外部`,以及子类使用`VSCode`直接会报错。\n\n```ts\nclass Person4 {\n    private name: string;\n    private sayhello(){\n        console.log(this.name + ' say hello');\n    };\n};\n\nclass Person_Person4 extends Person4 {\n    public saySomeThing() {\n        console.log(this.name); \n    }\n}\n//VSC Error: 属性“name”为私有属性，只能在类“Person4”中访问。\n// ————————下面的是外部调用——————————\nconst person4 = new Person4;\nperson4.name = \"Wibus\";\nperson4.sayhello();\n// VSC Error: 属性“sayhello”为私有属性，只能在类“Person4”中访问。\n```\n\n### 11.4 protected 访问属性\n\n> `protected` 允许在类内及继承的子类中使用\n\n把name的访问属性换成`protected`,这时候`外部`调用`name`的代码会报错，`内部`的不会报错，和`private`一样。这时候我们再写一个`Person_Person5`类，继承于`Person4`\n\n```ts\nclass Person5 {\n    protected name: string;\n    protected sayhello(){\n        console.log(this.name + ' say hello');\n    };\n};\n\nclass Person_Person5 extends Person5 {\n    public sayBye(){\n        return \"this.name\";\n    }\n}\n\n// ————————外部调用——————————\nconst person5 = new Person5;\nperson5.name = \"Wibus\";\nperson5.sayhello();\n// VSC Error: 属性“sayhello”受保护，只能在类“Person5”及其子类中访问。\n// ————————Person_Person5 类 ——————\nconst person_person5 = new Person_Person5;\nperson_person5.sayBye(); //VSC 不报错\n```\n\n那么通过这个例子相信你一定知道什么是类的内部和类的外部，也知道了三个访问类型的区别了\n\n### Demo11.ts\n\n```ts\n/**\n * Demo11.ts\n * TypeScript 中类的访问类型\n * @date 2021-1-3\n * @author Wibus\n */\n\n// 上节已经简单学习了TypeScript中类的使用，这节我们继续学习一下类中的访问类型。其实类的访问类型就是基于三个关键词private、protected和public,也是三种访问类型\n\n// 1 简单的类\n\nclass Person {\n    name: string;\n  }\n  \nconst person = new Person();\nperson.name = \"Wibus\";\n  \nconsole.log(person.name);\n// ts-node demo11.ts\n// result: Wibus\n\n// 2 public 访问属性\n// 这时候可以打出Wibus是因为我们如果不在类里对name的访问属性进行定义，那么它就会默认是public访问属性。\n\n// 相当于\nclass Person2 {\n    public name: string;\n};\n// public从英文字面的解释就是公共的或者说是公众的，在程序里的意思就是允许在类的内部和外部被调用.\nclass Person3 {\n    public name: string;\n    public sayhello(){\n        console.log(this.name + ' say hello');\n    };\n};\n// ————————下面的是外部调用——————————\nconst person3 = new Person3;\nperson3.name = \"Wibus\";\nperson3.sayhello();\n// ts-node demo11.ts\n// result: Wibus say hello\n\n// 3 private 访问属性\n// private 访问属性的意思是，只允许在类的内部被调用，外部不允许调用\n\nclass Person4 {\n    private name: string;\n    private sayhello(){\n        console.log(this.name + ' say hello');\n    };\n};\n\nclass Person_Person4 extends Person4 {\n    public saySomeThing() {\n        console.log(this.name); \n    }\n}\n//VSC Error: 属性“name”为私有属性，只能在类“Person4”中访问。\n// ————————下面的是外部调用——————————\nconst person4 = new Person4;\nperson4.name = \"Wibus\";\nperson4.sayhello();\n// VSC Error: 属性“sayhello”为私有属性，只能在类“Person4”中访问。\n\n\n// 4 protected 访问属性\n// protected 允许在类内及继承的子类中使用\n\nclass Person5 {\n    protected name: string;\n    protected sayhello(){\n        console.log(this.name + ' say hello');\n    };\n};\n\nclass Person_Person5 extends Person5 {\n    public sayBye(){\n        return \"this.name\";\n    }\n}\n\n// ————————外部调用——————————\nconst person5 = new Person5;\nperson5.name = \"Wibus\";\nperson5.sayhello();\n// VSC Error: 属性“sayhello”受保护，只能在类“Person5”及其子类中访问。\n// ————————Person_Person5 类 ——————\nconst person_person5 = new Person_Person5;\nperson_person5.sayBye(); //VSC 不报错\n```\n\n## 12 TypeScript 类的构造函数\n\n构造函数就是在类被初始化的时候，自动执行的一个方法。我们通过这个构造方法经常作很多需要提前完成的工作，比如显示页面前我们要从后台得到数据\n\n### 12.1 类的构造函数\n\n简单来说，构造函数的关键字就是`constructor`\n\n新建一个` Person` 类，类的里边定义一个`name`，但是`name`我们并不给他值,然后我们希望在`new`出对象的时候，直接通过传递参数的形式，给`name`赋值，并打印出来。这时候我们就需要用到`构造函数`了\n\n```ts\nclass Person{\n    public name: string;\n    constructor(name:string){\n        this.name = name;\n    };\n};\n\nconst person = new Person('Wibus');\nconsole.log(person.name);\n// ts-node demo12.ts\n// result: Wibus\n```\n\n这是最常规和好理解的写法，那么既然都这么说了，就是有更简单的写法啦\n\n#### 12.1.1 简单的写法\n\n```ts\nclass Person2 {\n    constructor(public name:string){} // 这个地方的name需要写上访问属性\n};\n\nconst person2 = new Person2('Wibus2');\nconsole.log(person2.name);\n```\n\n这种写法就相当于你定义了一个`name`,然后在构造函数里进行了赋值，这是一种简化的语法\n\n### 12.2 类继承中的构造器写法\n\n普通类的构造器我们已经会了，在子类中使用构造函数需要用`super()`调用父类的构造函数，如果你看不懂我在说啥的话，看下面的代码\n\n```ts\nclass Teacher extends Person2 {\n    constructor(public age: number){\n        super('Wibus');\n    };\n};\n\nconst teacher = new Teacher(18);\nconsole.log(teacher.age);\nconsole.log(teacher.name);\n```\n\n如果你不写`super('Wibus');`的话，VSC将会报错：派生类的构造函数必须包含 \"super\" 调用。\n\n当然你可以`super('');` 直接过去😂\n\n> 父类没有构造函数，子类也要使用`super()`进行调用，否则就会报错。\n\n```ts\nclass Person3 {};\n\nclass Teacher2 extends Person3 {\n    constructor(public age: number){\n        super();\n    };\n};\n\nconst teacher2 = new Teacher2(18);\nconsole.log(teacher2.age);\n```\n\n这一节主要讲的就是类中的构造函数（也有叫构造器的），构造函数在工作中用的很多，所以你要学会并作充分的练习～\n\n### Demo12.ts\n\n```ts\n/**\n * Demo12.ts\n * TypeScript 类的构造函数\n * @date 2021-1-3\n * @author Wibus\n * 构造函数就是在类被初始化的时候，自动执行的一个方法。我们通过这个构造方法经常作很多需要提前完成的工作，比如显示页面前我们要从后台得到数据\n */\n\n// 1 类的构造函数\n//构造函数的关键字是constructor\n\nclass Person{\n    public name: string;\n    constructor(name:string){\n        this.name = name;\n    };\n};\n\nconst person = new Person('Wibus');\nconsole.log(person.name);\n// ts-node demo12.ts\n// result: Wibus\n// 这是最常规和好理解的写法\n\n// 1.1 简单的写法\n\nclass Person2 {\n    constructor(public name:string){} // 这个地方的name需要写上访问属性\n};\n\nconst person2 = new Person2('Wibus2');\nconsole.log(person2.name);\n// 这种写法就相当于你定义了一个name,然后在构造函数里进行了赋值，这是一种简化的语法\n\n// 2 类继承中的构造器写法\n// 普通类的构造器我们已经会了，在子类中使用构造函数需要用super()调用父类的构造函数\n\nclass Teacher extends Person2 {\n    constructor(public age: number){\n        super('Wibus');\n    };\n};\n\nconst teacher = new Teacher(18);\nconsole.log(teacher.age);\nconsole.log(teacher.name);\n\n// 父类没有构造函数，子类也要使用super()进行调用，否则就会报错。\n\nclass Person3 {};\n\nclass Teacher2 extends Person3 {\n    constructor(public age: number){\n        super();\n    };\n};\n\nconst teacher2 = new Teacher2(18);\nconsole.log(teacher2.age);\n\n// 主要讲的就是类中的构造函数（也有叫构造器的），构造函数在工作中用的很多，所以你要学会并作充分的练习。\n```"},"__N_SSG":true}