{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport classNames from 'classnames';\nimport dynamic from 'next/dynamic';\nimport randomColor from 'randomcolor';\nimport { useEffect, useRef, useState } from 'react';\nimport { observer } from 'utils/mobx';\nimport { useStore } from '../../common/store';\nimport { isClientSide } from '../../utils/utils';\nvar Zmage = dynamic(() => import('react-zmage'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-zmage')],\n    modules: ['react-zmage']\n  }\n});\nvar LazyImage = dynamic(() => import('react-lazy-images').then(mo => mo.LazyImage), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-lazy-images')],\n    modules: ['react-lazy-images']\n  }\n});\nvar Image = observer((_ref) => {\n  var {\n    src,\n    alt,\n    placeholderRef,\n    popup = false\n  } = _ref;\n  var {\n    0: loaded,\n    1: setLoad\n  } = useState(false);\n  var {\n    appStore\n  } = useStore();\n  var isMobile = appStore.viewport.mobile;\n  useEffect(() => {\n    if (src) {\n      var image = new window.Image();\n      image.src = src;\n\n      image.onload = () => {\n        setLoad(true);\n\n        try {\n          if (placeholderRef && placeholderRef.current) {\n            placeholderRef.current.classList.add('hide');\n          } // if (wrapRef && wrapRef.current) {\n          //   wrapRef.current.style.height = ''\n          // }\n          // eslint-disable-next-line no-empty\n\n        } catch (_unused) {}\n      };\n    }\n  }, [placeholderRef, src]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classNames('lazyload-image', !loaded && 'image-hide')\n  }, popup ? isMobile ? __jsx(\"img\", {\n    src: src,\n    alt: alt,\n    onClick: () => {\n      window.open(src);\n    }\n  }) : __jsx(Zmage, {\n    src: src,\n    alt: alt,\n    backdrop: 'var(--light-bg)'\n  }) : __jsx(\"img\", {\n    src: src,\n    alt: alt\n  })));\n});\nexport var ImageLazy = observer(props => {\n  var {\n    defaultImage,\n    src,\n    alt = src,\n    height,\n    width,\n    useRandomBackgroundColor,\n    popup = false,\n    style\n  } = props,\n      rest = _objectWithoutProperties(props, [\"defaultImage\", \"src\", \"alt\", \"height\", \"width\", \"useRandomBackgroundColor\", \"popup\", \"style\"]);\n\n  var realImageRef = useRef(null);\n  var placeholderRef = useRef(null);\n  var wrapRef = useRef(null);\n  var colorMode = useStore().appStore.colorMode;\n  var {\n    0: randColor,\n    1: setRandColor\n  } = useState(randomColor({\n    luminosity: colorMode === 'light' ? 'bright' : 'dark'\n  }));\n  useEffect(() => {\n    setRandColor(randomColor({\n      luminosity: colorMode === 'light' ? 'light' : 'dark'\n    }));\n  }, [colorMode]);\n  return __jsx(\"div\", {\n    style: _objectSpread({}, style || {})\n  }, defaultImage ? __jsx(\"img\", _extends({\n    src: defaultImage,\n    alt: alt\n  }, rest, {\n    ref: realImageRef\n  })) : __jsx(\"div\", {\n    style: {\n      position: 'relative',\n      // overflow: 'hidden',\n      height,\n      width,\n      maxWidth: '100%',\n      margin: 'auto'\n    },\n    ref: wrapRef\n  }, __jsx(LazyImage, {\n    src: src,\n    alt: alt,\n    loadEagerly: !isClientSide(),\n    placeholder: (_ref2) => {\n      var {\n        ref\n      } = _ref2;\n      return __jsx(\"div\", {\n        ref: ref\n      });\n    },\n    actual: props => {\n      return __jsx(Image, _extends({\n        className: 'image-hide lazyload-image'\n      }, rest, {\n        src: src,\n        alt: alt,\n        popup: popup\n      }, {\n        placeholderRef\n      }, props));\n    },\n    observerProps: isClientSide() ? {\n      rootMargin: '100px'\n    } : undefined\n  }), __jsx(\"div\", {\n    className: classNames('placeholder-image', props.className),\n    ref: placeholderRef,\n    style: {\n      height,\n      width,\n      maxWidth: '100%',\n      position: 'absolute',\n      backgroundColor: useRandomBackgroundColor ? randColor : '',\n      filter: useRandomBackgroundColor && colorMode === 'dark' ? 'brightness(0.5)' : 'brightness(1.3)',\n      zIndex: -1\n    }\n  })), alt && alt.startsWith('!') && __jsx(\"p\", {\n    className: 'img-alt'\n  }, alt.slice(1)));\n});\nexport var ImageLazyWithPopup = props => {\n  var {\n    src,\n    alt,\n    height,\n    width\n  } = props,\n      rest = _objectWithoutProperties(props, [\"src\", \"alt\", \"height\", \"width\"]);\n\n  return __jsx(ImageLazy, _extends({\n    src: src,\n    alt: alt || src,\n    height: height,\n    width: width,\n    useRandomBackgroundColor: true,\n    popup: true\n  }, rest));\n};","map":null,"metadata":{},"sourceType":"module"}