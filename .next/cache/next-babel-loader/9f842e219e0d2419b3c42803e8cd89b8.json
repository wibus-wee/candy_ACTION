{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { faCheckCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport { Footer } from 'components/Footer';\nimport Header from 'components/Header';\nimport { observer } from 'utils/mobx';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { NoticePanel } from '../components/Notice';\nimport { Switch } from '../components/LampSwitch';\nimport { useStore } from '../common/store';\nimport { UAParser } from 'ua-parser-js';\nimport { faAndroid, faApple, faCentos, faChrome, faLinux, faRedhat, faUbuntu, faWindows } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { UUID } from 'utils';\nexport var BasicLayout = observer(function (_ref) {\n  var children = _ref.children;\n\n  var _useStore = useStore(),\n      appStore = _useStore.appStore,\n      actionStore = _useStore.actionStore;\n\n  var autoToggleColorMode = appStore.autoToggleColorMode,\n      colorMode = appStore.colorMode;\n\n  var _useState = useState(false),\n      showNotice = _useState[0],\n      setNotice = _useState[1];\n\n  var _useState2 = useState({\n    text: '白天模式',\n    icon: faSun\n  }),\n      tip = _useState2[0],\n      setTip = _useState2[1];\n\n  var handleChangeColorMode = useCallback(function () {\n    var $html = document.documentElement;\n\n    if (autoToggleColorMode) {\n      var nowColorMode = colorMode;\n      appStore.colorMode = nowColorMode == 'dark' ? 'light' : 'dark';\n      appStore.autoToggleColorMode = false;\n      $html.classList.remove(nowColorMode);\n      $html.classList.add(appStore.colorMode);\n      var isDark = appStore.colorMode == 'dark';\n      setTip({\n        text: (isDark ? '夜间模式' : '白天模式') + '(手动)',\n        icon: isDark ? faMoon : faSun\n      });\n    } else {\n      appStore.autoToggleColorMode = true;\n      appStore.colorMode = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      $html.classList.remove('dark', 'light');\n      var osName = new UAParser(navigator.userAgent).getOS().name;\n      var icon = faCheckCircle;\n\n      switch (osName) {\n        case 'Android':\n          {\n            icon = faAndroid;\n            break;\n          }\n\n        case 'Mac OS':\n        case 'iOS':\n          {\n            icon = faApple;\n            break;\n          }\n\n        case 'Windows':\n          {\n            icon = faWindows;\n            break;\n          }\n\n        case 'Linux':\n          {\n            icon = faLinux;\n            break;\n          }\n\n        case 'CentOS':\n          {\n            icon = faCentos;\n            break;\n          }\n\n        case 'Chromium OS':\n          {\n            icon = faChrome;\n            break;\n          }\n\n        case 'Ubuntu':\n          {\n            icon = faUbuntu;\n            break;\n          }\n\n        case 'RedHat':\n          {\n            icon = faRedhat;\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n\n      setTip({\n        text: '跟随系统',\n        icon: icon\n      });\n    }\n\n    setNotice(!showNotice);\n  }, [appStore, autoToggleColorMode, colorMode, showNotice]);\n  var actionUUID = useMemo(function () {\n    return new UUID();\n  }, []);\n  useEffect(function () {\n    actionStore.removeActionByUUID(actionUUID);\n\n    if (appStore.viewport.mobile || appStore.viewport.pad) {\n      var action = {\n        id: actionUUID,\n        icon: appStore.colorMode === 'dark' ? __jsx(FontAwesomeIcon, {\n          icon: faSun\n        }) : __jsx(FontAwesomeIcon, {\n          icon: faMoon\n        }),\n        onClick: handleChangeColorMode\n      };\n      actionStore.appendActions(action);\n      return function () {\n        actionStore.removeActionByUUID(actionUUID);\n      };\n    }\n  }, [actionStore, actionUUID, appStore.colorMode, appStore.viewport.mobile, appStore.viewport.pad, handleChangeColorMode]);\n  return __jsx(React.Fragment, null, __jsx(Header, null), children, __jsx(Footer, null), !(appStore.viewport.mobile || appStore.viewport.pad) && __jsx(Switch, {\n    onClick: handleChangeColorMode\n  }), showNotice && __jsx(NoticePanel, _extends({}, tip, {\n    setShow: setNotice,\n    key: 'notice'\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}