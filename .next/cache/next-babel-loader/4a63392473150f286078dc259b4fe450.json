{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { faSmile, faSun } from '@fortawesome/free-regular-svg-icons';\nimport { faClock, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { useStore } from 'common/store';\nimport Action from 'components/Action';\nimport Markdown from 'components/MD-render';\nimport configs from 'configs';\nimport { Core } from 'core';\nimport { NoteLayout } from 'layouts/NoteLayout';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { observer } from 'utils/mobx';\nimport { parseDate, relativeTimeFromNow } from 'utils/time';\nimport { Seo } from '../../components/SEO';\nimport { getSummaryFromMd } from '../../utils';\nimport { Error } from 'components/Error';\n\nconst renderLines = ({\n  value\n}) => {\n  return __jsx(\"span\", {\n    className: \"indent\"\n  }, value);\n};\n\nconst NoteView = observer(props => {\n  const {\n    content: text,\n    created,\n    modified,\n    nid,\n    title,\n    mood,\n    weather,\n    hasNext,\n    hasPrev\n  } = props;\n  const {\n    appStore\n  } = useStore();\n  const router = useRouter();\n\n  if (!router.isFallback && !props.nid) {\n    return __jsx(Error, {\n      statusCode: 404\n    });\n  }\n\n  const {\n    0: tips,\n    1: setTips\n  } = useState(``);\n  const {\n    description,\n    wordCount\n  } = getSummaryFromMd(text, {\n    count: true\n  });\n  useEffect(() => {\n    try {\n      setTips(`创建于 ${parseDate(created, 'YYYY-MM-DD dddd')}, 修改于 ${parseDate(modified, 'YYYY-MM-DD dddd')}, 全文字数: ${wordCount}`); // eslint-disable-next-line no-empty\n    } catch {}\n  }, [text, wordCount, created, modified]);\n  useEffect(() => {\n    if (document.documentElement.scrollTop > 50) {\n      document.documentElement.scrollTop = 50;\n    }\n\n    setTimeout(() => {\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }, 10);\n  }, [props]);\n  const actions = {\n    informs: []\n  };\n  {\n    if (weather) {\n      actions.informs.push({\n        name: weather,\n        icon: faSun\n      });\n    }\n\n    if (mood) {\n      actions.informs.push({\n        name: mood,\n        icon: faSmile\n      });\n    }\n\n    actions.informs.push({\n      name: configs.author,\n      icon: faUser\n    }, {\n      name: relativeTimeFromNow(created),\n      icon: faClock\n    });\n  }\n  useEffect(() => {\n    appStore.headerNav = {\n      title,\n      meta: '日记',\n      show: true\n    };\n    return () => {\n      appStore.headerNav.show = false;\n    };\n  }, [appStore, title]);\n  return __jsx(React.Fragment, null, __jsx(Seo, {\n    title: title,\n    description,\n    openGraph: {\n      title,\n      type: 'article',\n      description,\n      article: {\n        publishedTime: created,\n        modifiedTime: modified,\n        tags: ['Note of Life']\n      }\n    }\n  }), __jsx(NoteLayout, {\n    title: title,\n    date: new Date(created),\n    tips: tips\n  }, __jsx(Markdown, {\n    value: text,\n    escapeHtml: false,\n    renderers: {\n      text: renderLines\n    }\n  }), __jsx(Action, actions), (!!hasNext || !!hasPrev) && __jsx(\"section\", {\n    className: \"paul-more\"\n  }, !!hasNext && __jsx(\"button\", {\n    className: \"btn green\",\n    onClick: () => {\n      router.push('/notes/[id]', `/notes/${nid + 1}`);\n    }\n  }, \"\\u540E\\u4E00\\u7BC7\"), __jsx(\"button\", {\n    className: \"btn yellow\",\n    onClick: () => {\n      window.scrollTo({\n        left: 0,\n        top: 0,\n        behavior: 'smooth'\n      });\n      router.push('/timeline?type=note');\n    }\n  }, \"\\u65F6\\u95F4\\u7EBF\"), !!hasPrev && __jsx(\"button\", {\n    className: \"btn green\",\n    onClick: () => {\n      router.push('/notes/[id]', `/notes/${nid - 1}`);\n    }\n  }, \"\\u524D\\u4E00\\u7BC7\"))));\n});\nexport const getStaticProps = async (context) => {\n  const {\n    params\n  } = context;\n  const {\n    id\n  } = params;\n  const note = Core.fetcher.notes.get(id);\n  return {\n    props: note || {}\n  };\n};\nexport const getStaticPaths = async () => {\n  const paths = Core.fetcher.notes.getKeys().map(k => {\n    return {\n      params: {\n        id: k\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default NoteView;","map":null,"metadata":{},"sourceType":"module"}