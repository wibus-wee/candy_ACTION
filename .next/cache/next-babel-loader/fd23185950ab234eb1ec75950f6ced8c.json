{"ast":null,"code":"/*\n * @Author: Innei\n * @Date: 2020-09-05 10:08:58\n * @LastEditTime: 2020-09-05 16:40:36\n * @LastEditors: Innei\n * @FilePath: /candy/utils/collection.ts\n * @Coding with Love\n */\nexport default class Collection extends Map {\n  toObject() {\n    // @ts-ignore\n    const obj = {};\n\n    for (const [k, v] of this.entries()) {\n      obj[k] = v;\n    }\n\n    return obj;\n  }\n\n  toJSON() {\n    return JSON.stringify(this.toObject());\n  }\n\n  get tail() {\n    return [...this.values()][this.size - 1];\n  }\n\n  slice(start, end) {\n    if (start < 0 || start > end) {\n      return [];\n    }\n\n    const entries = [...this.values()];\n    const arr = [];\n\n    for (let index = start; index < Math.min(end, this.size); index++) {\n      arr.push(entries[index]);\n    }\n\n    return arr;\n  }\n\n  getKeys() {\n    return [...this.entries()].map(([k]) => k);\n  }\n\n  getValues() {\n    return [...this.entries()].map(([, v]) => v);\n  }\n\n  map(cb) {\n    const e = this.entries();\n    let index = 0;\n    const arr = [];\n\n    for (const [k, v] of e) {\n      const item = cb.call(this, v, k, index++);\n      arr.push(item);\n    }\n\n    return arr;\n  }\n\n  uniqueSet(key, value) {\n    const hasKey = this.has(key);\n\n    if (hasKey) {\n      const postfixRegexp = /-(\\d+)$/;\n      const hasPostfix = postfixRegexp.exec(key);\n\n      if (!hasPostfix) {\n        return this.set(key.concat('-1'), value);\n      } else {\n        const now = hasPostfix[1];\n        const next = now + 1;\n        return this.set(key.concat('-', next.toString()), value);\n      }\n    } else {\n      return this.set(key, value);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}