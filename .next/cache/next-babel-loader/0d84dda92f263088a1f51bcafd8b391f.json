{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport classNames from 'classnames';\nimport dynamic from 'next/dynamic';\nimport randomColor from 'randomcolor';\nimport { useEffect, useRef, useState } from 'react';\nimport { observer } from 'utils/mobx';\nimport { useStore } from '../../common/store';\nimport { isClientSide } from '../../utils/utils';\nvar Zmage = dynamic(function () {\n  return import('react-zmage');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-zmage')];\n    },\n    modules: ['react-zmage']\n  }\n});\nvar LazyImage = dynamic(function () {\n  return import('react-lazy-images').then(function (mo) {\n    return mo.LazyImage;\n  });\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-lazy-images')];\n    },\n    modules: ['react-lazy-images']\n  }\n});\nvar Image = observer(function (_ref) {\n  var src = _ref.src,\n      alt = _ref.alt,\n      placeholderRef = _ref.placeholderRef,\n      _ref$popup = _ref.popup,\n      popup = _ref$popup === void 0 ? false : _ref$popup;\n\n  var _useState = useState(false),\n      loaded = _useState[0],\n      setLoad = _useState[1];\n\n  var _useStore = useStore(),\n      appStore = _useStore.appStore;\n\n  var isMobile = appStore.viewport.mobile;\n  useEffect(function () {\n    if (src) {\n      var image = new window.Image();\n      image.src = src;\n\n      image.onload = function () {\n        setLoad(true);\n\n        try {\n          if (placeholderRef && placeholderRef.current) {\n            placeholderRef.current.classList.add('hide');\n          } // if (wrapRef && wrapRef.current) {\n          //   wrapRef.current.style.height = ''\n          // }\n          // eslint-disable-next-line no-empty\n\n        } catch (_unused) {}\n      };\n    }\n  }, [placeholderRef, src]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classNames('lazyload-image', !loaded && 'image-hide')\n  }, popup ? isMobile ? __jsx(\"img\", {\n    src: src,\n    alt: alt,\n    onClick: function onClick() {\n      window.open(src);\n    }\n  }) : __jsx(Zmage, {\n    src: src,\n    alt: alt,\n    backdrop: 'var(--light-bg)'\n  }) : __jsx(\"img\", {\n    src: src,\n    alt: alt\n  })));\n});\nexport var ImageLazy = observer(function (props) {\n  var defaultImage = props.defaultImage,\n      src = props.src,\n      _props$alt = props.alt,\n      alt = _props$alt === void 0 ? src : _props$alt,\n      height = props.height,\n      width = props.width,\n      useRandomBackgroundColor = props.useRandomBackgroundColor,\n      _props$popup = props.popup,\n      popup = _props$popup === void 0 ? false : _props$popup,\n      style = props.style,\n      rest = _objectWithoutProperties(props, [\"defaultImage\", \"src\", \"alt\", \"height\", \"width\", \"useRandomBackgroundColor\", \"popup\", \"style\"]);\n\n  var realImageRef = useRef(null);\n  var placeholderRef = useRef(null);\n  var wrapRef = useRef(null);\n  var colorMode = useStore().appStore.colorMode;\n\n  var _useState2 = useState(randomColor({\n    luminosity: colorMode === 'light' ? 'bright' : 'dark'\n  })),\n      randColor = _useState2[0],\n      setRandColor = _useState2[1];\n\n  useEffect(function () {\n    setRandColor(randomColor({\n      luminosity: colorMode === 'light' ? 'light' : 'dark'\n    }));\n  }, [colorMode]);\n  return __jsx(\"div\", {\n    style: _objectSpread({}, style || {})\n  }, defaultImage ? __jsx(\"img\", _extends({\n    src: defaultImage,\n    alt: alt\n  }, rest, {\n    ref: realImageRef\n  })) : __jsx(\"div\", {\n    style: {\n      position: 'relative',\n      // overflow: 'hidden',\n      height: height,\n      width: width,\n      maxWidth: '100%',\n      margin: 'auto'\n    },\n    ref: wrapRef\n  }, __jsx(LazyImage, {\n    src: src,\n    alt: alt,\n    loadEagerly: !isClientSide(),\n    placeholder: function placeholder(_ref2) {\n      var ref = _ref2.ref;\n      return __jsx(\"div\", {\n        ref: ref\n      });\n    },\n    actual: function actual(props) {\n      return __jsx(Image, _extends({\n        className: 'image-hide lazyload-image'\n      }, rest, {\n        src: src,\n        alt: alt,\n        popup: popup\n      }, {\n        placeholderRef: placeholderRef\n      }, props));\n    },\n    observerProps: isClientSide() ? {\n      rootMargin: '100px'\n    } : undefined\n  }), __jsx(\"div\", {\n    className: classNames('placeholder-image', props.className),\n    ref: placeholderRef,\n    style: {\n      height: height,\n      width: width,\n      maxWidth: '100%',\n      position: 'absolute',\n      backgroundColor: useRandomBackgroundColor ? randColor : '',\n      filter: useRandomBackgroundColor && colorMode === 'dark' ? 'brightness(0.5)' : 'brightness(1.3)',\n      zIndex: -1\n    }\n  })), alt && alt.startsWith('!') && __jsx(\"p\", {\n    className: 'img-alt'\n  }, alt.slice(1)));\n});\nexport var ImageLazyWithPopup = function ImageLazyWithPopup(props) {\n  var src = props.src,\n      alt = props.alt,\n      height = props.height,\n      width = props.width,\n      rest = _objectWithoutProperties(props, [\"src\", \"alt\", \"height\", \"width\"]);\n\n  return __jsx(ImageLazy, _extends({\n    src: src,\n    alt: alt || src,\n    height: height,\n    width: width,\n    useRandomBackgroundColor: true,\n    popup: true\n  }, rest));\n};","map":null,"metadata":{},"sourceType":"module"}