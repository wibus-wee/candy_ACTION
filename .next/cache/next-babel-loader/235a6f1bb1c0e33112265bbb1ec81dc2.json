{"ast":null,"code":"var __jsx = React.createElement;\nimport { useStore } from 'common/store';\nimport Markdown from 'components/MD-render';\nimport { Seo } from 'components/SEO';\nimport { Core } from 'core';\nimport { ArticleLayout } from 'layouts/ArticleLayout';\nimport React, { useEffect } from 'react';\nimport RemoveMarkdown from 'remove-markdown';\nimport { observer } from 'utils/mobx';\n\nconst Page = props => {\n  const {\n    content: text,\n    subtitle,\n    title\n  } = props;\n  const {\n    appStore\n  } = useStore();\n  useEffect(() => {\n    appStore.headerNav = {\n      title,\n      meta: subtitle,\n      show: true\n    };\n    return () => {\n      appStore.headerNav.show = false;\n    };\n  }, [appStore, subtitle, title]);\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: 'smooth'\n    });\n  }, [props]);\n  return __jsx(ArticleLayout, {\n    title: title,\n    subtitle: subtitle\n  }, __jsx(Seo, {\n    title: title,\n    openGraph: {\n      type: 'article'\n    },\n    description: RemoveMarkdown(text).slice(0, 100).replace('\\n', '')\n  }), __jsx(Markdown, {\n    value: text,\n    escapeHtml: false,\n    showTOC: true\n  }));\n};\n\nexport const getStaticProps = async (context) => {\n  const {\n    params\n  } = context;\n  const {\n    slug\n  } = params;\n  const page = Core.fetcher.pages.get(slug);\n  return {\n    props: page || {}\n  };\n};\nexport const getStaticPaths = async () => {\n  const paths = Core.fetcher.pages.getKeys().map(k => {\n    return {\n      params: {\n        slug: k\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default observer(Page);","map":null,"metadata":{},"sourceType":"module"}