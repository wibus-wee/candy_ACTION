{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport merge from 'lodash/merge';\nimport { NextSeo } from 'next-seo';\nimport { observer } from 'utils/mobx';\nimport configs from '../../configs';\nimport { getRandomImage } from '../../utils/utils';\nexport const SEO = observer(props => {\n  const {\n    title,\n    description,\n    openGraph\n  } = props,\n        rest = _objectWithoutProperties(props, [\"title\", \"description\", \"openGraph\"]);\n\n  const Title = title + ' - ' + configs.title;\n  return __jsx(NextSeo, _objectSpread({\n    title,\n    titleTemplate: '%s - ' + configs.title,\n    openGraph: merge({\n      profile: {\n        username: configs.author\n      },\n      type: 'article',\n      locale: 'zh-cn',\n      site_name: configs.title,\n      description: description || '',\n      article: {\n        authors: [configs.author]\n      },\n      title: Title,\n      images: [{\n        url: getRandomImage().pop(),\n        alt: title + ' - ' + configs.title\n      }]\n    }, openGraph),\n    description: description || '',\n    twitter: {\n      cardType: 'summary',\n      site: configs.url\n    }\n  }, rest));\n});\nexport const Seo = SEO;","map":null,"metadata":{},"sourceType":"module"}